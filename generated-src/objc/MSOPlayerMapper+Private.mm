// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from general.djinni

#import "MSOPlayerMapper+Private.h"
#import "MSOPlayerMapper.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MSOPlayer+Private.h"
#import "MSOPlayerMapper+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MSOPlayerMapper ()

- (id)initWithCpp:(const std::shared_ptr<::shared_objects::PlayerMapper>&)cppRef;

@end

@implementation MSOPlayerMapper {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::shared_objects::PlayerMapper>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::shared_objects::PlayerMapper>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable MSOPlayerMapper *)create {
    try {
        auto r = ::shared_objects::PlayerMapper::create();
        return ::djinni_generated::PlayerMapper::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MSOPlayer *)getPlayer:(nonnull NSString *)json {
    try {
        auto r = _cppRefHandle.get()->get_player(::djinni::String::toCpp(json));
        return ::djinni_generated::Player::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto PlayerMapper::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto PlayerMapper::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MSOPlayerMapper>(cpp);
}

}  // namespace djinni_generated

@end
